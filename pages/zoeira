import Link from "next/link"
import 'bootstrap/dist/css/bootstrap.min.css'
import {useState} from 'react'
import { connectToDatabase } from "../utils/dbConnect";

export default function Home(props){
    const [tema, setTema] = useState('Saberes docentes e a formação dos professores')
    async function handleSelect(e){
        const {value} = e.target
        setTema(value)
    }
    const button = {
        "font": "35px sans-serif",
        "outline":"none",
        "border":"none",
        "backgroundColor": '#78C9FB',
        "textDecoration":"none",
        "justifyContent":"center",
        "width" : "200px",
        "height": "100px",
        "borderRadius": "50px",
        "margin": "30px"
    }
     const body = 
      {
        "margin": 0,
        "padding": 0,
        "border": 0,
        "background": "linear-gradient(to right top, #d16ba5, #c777b9, #ba83ca, #aa8fd8, #9a9ae1, #8aa7ec, #79b3f4, #69bff8, #52cffe, #41dfff, #46eefa, #5ffbf1 100%)"}

    return(
        <body style={body}>
        <div style={{margin:'50px'}}>    
            <h1>Instruções</h1>
            <ul style={{fontSize:'22px', lineHeight:'50px'}}>
                <li>Este jogo foi produzido com base no texto <strong>Saberes docentes e formação de professores: Um breve panorama da pesquisa brasileira</strong>, por Cecília Maria Fernandes Nunes</li>
                <li>Escolha um tema</li>
                <li>Monte sua equipe</li>
                <li>Clique nos cartões para revelar seu conteúdo e discuta com sua equipe: Qual é a pergunta?</li>
                <li>Cada campo, que tem um cartão de cor correspondente, deve ser preenchido com a resposta definida pelo grupo</li>
                <li>Ao término da resolução, um botão para a página do gabarito será liberado</li>
                <li>O objetivo do jogo é acertar o maior número de perguntas</li>
                <li>As respostas serão enviadas para o professor, que conduzirá uma discussão com a turma sobre o entendimento de cada grupo acerca do tema proposto</li>
            </ul>
            <h1>Tema</h1>
            <div>
            <h1>Escolha um tema</h1>
                <select onChange={handleSelect}>
                <option value="" disabled selected>Escolha um tema</option>
                    {props.temas.map((n, index) => {
                        return(
                            <option key={index} value={n}>{n}</option>
                        )
                    })}
                </select>
            </div>
            <Link href={{pathname: "/jogar", query: {tema: tema}}}>
                    <a><button style={button}>Jogar</button></a>
            </Link>
        </div>
        </body>
    )
}

export async function getStaticProps(query){
    const { db } = await connectToDatabase();

    const data = await db
    .collection("temas")
    .find({})
    .toArray();
    let temas = data.map(d => {
        return d.tema
    })
    return { props: {temas}, revalidate: 1 }
    }








    import Head from "next/head"
import Link from 'next/link'
import Pergunta from '../components/Pergunta'
import { connectToDatabase } from "../utils/dbConnect";
import {useState} from 'react'

function Jogar(props){

    async function handleClick(e){
        e.preventDefault()
        if(form.nome) await salva(form)
    }
    let form = {nome: '', p: {}, tema: props.tema}
    function handleChange(e){
        const {name, value} = e.target
        name != 'nome' ? form.p[name] = value : form[name] = value
    }
    const button = {
        "font": "22px sans-serif",
        "outline":"none",
        "border":"none",
        "backgroundColor": '#78C9FB',
        "textDecoration":"none",
        "justifyContent":"center",
        "width" : "250px",
        "height": "100px",
        "borderRadius": "50px",
        "margin": "30px",
        "marginLeft": "80px"
    }

    async function salva(form){
        await fetch('api/name', {
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            method: "POST",
            body: JSON.stringify(form)
          })
          document.querySelector('#gabarito').disabled = false
          document.querySelector('#gabarito').preventDefault = true
    }
    
    const d = {
        "paddingLeft":"10px",
        "display":"grid",
        "gridTemplateColumns": "repeat(3, 1fr)",
        "rowGap": "30px",
        "columnGap": "10px",
        "alignItems": "center"
    }
    const body = {
        "margin": 0,
        "padding": 0,
        "border": 0,
        "backgroundImage": "linear-gradient(to right top, #d16ba5, #c777b9, #ba83ca, #aa8fd8, #9a9ae1, #8aa7ec, #79b3f4, #69bff8, #52cffe, #41dfff, #46eefa, #5ffbf1 100%)",
    }

    const nome = {
        display: "block",
        borderRadius: "4px",
        margin: "10px",
        border: "none",
        outline: "none",
        width: "400px",
        fontSize: "40px"
    }
    function reset(){
        document.querySelectorAll("#round").forEach(function(element){
            element.display = "none";
      })
    }

    return (
    <div style={body}>
        <Head>
            <title>{props.tema}</title>
            <link rel="shortcut icon" type="image/png" href="https://github.com/Gabrielbzl001/ghostk/blob/master/favicon.png?raw=true"/>
        </Head>
        <h1>Qual é a pergunta?</h1>
        <div id="round" style={d} onClick={reset}>
        <input type="text" placeholder="Nome" style={nome} name="nome" onChange={handleChange}></input>
        {props.p.map((p, i) =>{
            function mudaCor(e){
                setV(v == 'block' ? 'none' : 'block')
            }
            const [v, setV] = useState('none')
            return <Pergunta key={i} cor={p.c} onClick={mudaCor} display={v} onChange={handleChange}>{p.p}</Pergunta>
        })}
        <div>
        <button style={button} onClick={handleClick} >Enviar respostas</button>
        <Link href="/gabarito"><a><button style={button} id="gabarito" disabled>Ver Gabarito</button></a></Link>
        </div>
        </div>
    </div>
    )
}

export async function getServerSideProps(query){
    const {tema} = query.query
    const { db } = await connectToDatabase();
    const data = await db
    .collection("temas")
    .findOne({tema: tema})
    let {p} = await data
    return { props: {p, tema} }
}


export default Jogar






import { connectToDatabase } from "../utils/dbConnect";
import {useState} from 'react'


export default function Respostas(props){
    const [respo, setRespo] = useState()    
    const [nome, setNome] = useState(props.nomes[0])
    const [tema, setTema] = useState(props.temas[0])
    function handleSelect(e){
        e.target.name == 'tema' ? setTema(e.target.value) : setNome(e.target.value)
    }
    async function hook(){
        try {
            const res = await fetch(`api/name?nome=${nome}&tema=${tema}`)
            const {respo, rest} = await res.json()
            setRespo(
            (
            <div>
                {rest.map((r, index)=>{
                    return (
                        <p key={index} style={{color: r.c}}>Resposta: {respo[0].p[index+1] || "Não respondeu"} |  Gabarito {r.r}</p>
                        )
                    } )}
            </div>
            )
            )   
        } catch (error) {
            
        }
    }
    return(   
    <div>
        <h1>Escolha um tema</h1>
        <select name="tema" onClick={handleSelect}>
            {props.temas.map((n, index) => {
                return(
                    <option key={index}>{n}</option>
                )
            })}
        </select>
        <h1>Escolha um nome</h1>
        <select name="nome" onClick={handleSelect}>
            {props.nomes.map((n, index) => {
                return(
                    <option key={index}>{n}</option>
                )
            })}
        </select>
        <button onClick={hook}>Buscar</button>
        <div>
            {respo}
        </div>
    </div>
)
}

export async function getServerSideProps(query){
    const { db } = await connectToDatabase();

    const data = await db
    .collection("respostas")
    .find({})
    .toArray();
    let nomes = data.map(d => {
        return d.nome
    })
    const res = await db
    .collection("temas")
    .find({})
    .toArray();
    let temas = res.map(d => {
        return d.tema
    })
    return { props: {nomes, temas}}
    }